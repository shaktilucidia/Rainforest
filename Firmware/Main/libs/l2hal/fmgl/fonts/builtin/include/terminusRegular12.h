/*
	This file is part of Shakti Lucidia's STM32 level 2 HAL.

	STM32 level 2 HAL is free software: you can redistribute it and/or modify
	it under the terms of the GNU Affero General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU Affero General Public License for more details.

	You should have received a copy of the GNU Affero General Public License
	along with this program.  If not, see <http://www.gnu.org/licenses/>.

	-------------------------------------------------------------------------

	Created by Shakti Lucidia

	Feel free to contact: shakti_lucidia@proton.me

	Repository: https://github.com/shaktilucidia/stm32-l2hal

	-------------------------------------------------------------------------
 */

/**
 * @file
 * @brief Terminus font, regular, 6x12 pixels.
 */

#ifndef FMGL_INCLUDE_FONTS_TERMINUSREGULAR12_H_
#define FMGL_INCLUDE_FONTS_TERMINUSREGULAR12_H_

#include "../../../include/fmgl.h"

/**
 * Character width.
 */
#define FMGL_FONT_TERMINUS_REGULAR_12_CHARACTER_WIDTH 6

/**
 * Character height.
 */
#define FMGL_FONT_TERMINUS_REGULAR_12_CHARACTER_HEIGHT 12

/**
 * Character code of first FMGL_FontTerminusRegular12Characters array element.
 */
#define FMGL_FONT_TERMINUS_REGULAR_12_FIRST_CHARACTER_CODE 0x20U

/**
 * FMGL_FontTerminusRegular12Characters first dimension size.
 */
#define FMGL_FONT_TERMINUS_REGULAR_12_CHARACTERS_TABLE_LENGTH 0xE0U

/**
 * Call this function to get font instance.
 */
FMGL_API_Font FMGL_FontTerminusRegular12Init(void);

/**
 * Returns character width.
 * @param context Font context, have no meaning for built-in fonts
 * @param character Character code.
 * @return Character width.
 */
uint16_t FMGL_FontTerminusRegular12GetCharacterWidth (void* context, uint8_t character);

/**
 * Returns character raster.
 * @param context Font context, have no meaning for built-in fonts
 * @param character Character code.
 * @return Pointer to raster data.
 */
const uint8_t* FMGL_FontTerminusRegular12GetCharacterRaster(void* context, uint8_t character);

/**
 * Characters rasters.
 */
static const uint8_t FMGL_FontTerminusRegular12Characters[FMGL_FONT_TERMINUS_REGULAR_12_CHARACTERS_TABLE_LENGTH][FMGL_FONT_TERMINUS_REGULAR_12_CHARACTER_HEIGHT] =
{
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* 0x20 - Space */
	{ 0x00, 0x00, 0x04, 0x04, 0x04, 0x04, 0x04, 0x00, 0x04, 0x04, 0x00, 0x00 }, /* 0x21 - ! */
	{ 0x00, 0x0A, 0x0A, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* 0x22 - " */
	{ 0x00, 0x00, 0x0A, 0x0A, 0x1F, 0x0A, 0x0A, 0x1F, 0x0A, 0x0A, 0x00, 0x00 }, /* 0x23 - # */
	{ 0x00, 0x00, 0x04, 0x0E, 0x15, 0x05, 0x0E, 0x14, 0x15, 0x0E, 0x04, 0x00 }, /* 0x24 - $ */
	{ 0x00, 0x00, 0x12, 0x15, 0x0A, 0x08, 0x04, 0x14, 0x2A, 0x12, 0x00, 0x00 }, /* 0x25 - % */
	{ 0x00, 0x00, 0x04, 0x0A, 0x0A, 0x04, 0x16, 0x09, 0x09, 0x16, 0x00, 0x00 }, /* 0x26 - & */
	{ 0x00, 0x04, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* 0x27 - ' */
	{ 0x00, 0x00, 0x08, 0x04, 0x02, 0x02, 0x02, 0x02, 0x04, 0x08, 0x00, 0x00 }, /* 0x28 - ( */
	{ 0x00, 0x00, 0x02, 0x04, 0x08, 0x08, 0x08, 0x08, 0x04, 0x02, 0x00, 0x00 }, /* 0x29 - ) */
	{ 0x00, 0x00, 0x00, 0x00, 0x0A, 0x04, 0x1F, 0x04, 0x0A, 0x00, 0x00, 0x00 }, /* 0x2A - * */
	{ 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x1F, 0x04, 0x04, 0x00, 0x00, 0x00 }, /* 0x2B - + */
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x02, 0x00 }, /* 0x2C - , */
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* 0x2D - - */
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00 }, /* 0x2E - . */
	{ 0x00, 0x00, 0x10, 0x10, 0x08, 0x08, 0x04, 0x04, 0x02, 0x02, 0x00, 0x00 }, /* 0x2F - / */

	{ 0x00, 0x00, 0x0E, 0x11, 0x19, 0x15, 0x13, 0x11, 0x11, 0x0E, 0x00, 0x00 }, /* 0x30 - 0 */
	{ 0x00, 0x00, 0x04, 0x06, 0x04, 0x04, 0x04, 0x04, 0x04, 0x0E, 0x00, 0x00 }, /* 0x31 - 1 */
	{ 0x00, 0x00, 0x0E, 0x11, 0x11, 0x10, 0x08, 0x04, 0x02, 0x1F, 0x00, 0x00 }, /* 0x32 - 2 */
	{ 0x00, 0x00, 0x0E, 0x11, 0x10, 0x0C, 0x10, 0x10, 0x11, 0x0E, 0x00, 0x00 }, /* 0x33 - 3 */
	{ 0x00, 0x00, 0x10, 0x18, 0x14, 0x12, 0x11, 0x1F, 0x10, 0x10, 0x00, 0x00 }, /* 0x34 - 4 */
	{ 0x00, 0x00, 0x1F, 0x01, 0x01, 0x0F, 0x10, 0x10, 0x11, 0x0E, 0x00, 0x00 }, /* 0x35 - 5 */
	{ 0x00, 0x00, 0x0E, 0x01, 0x01, 0x0F, 0x11, 0x11, 0x11, 0x0E, 0x00, 0x00 }, /* 0x36 - 6 */
	{ 0x00, 0x00, 0x1F, 0x10, 0x10, 0x08, 0x08, 0x04, 0x04, 0x04, 0x00, 0x00 }, /* 0x37 - 7 */
	{ 0x00, 0x00, 0x0E, 0x11, 0x11, 0x0E, 0x11, 0x11, 0x11, 0x0E, 0x00, 0x00 }, /* 0x38 - 8 */
	{ 0x00, 0x00, 0x0E, 0x11, 0x11, 0x11, 0x1E, 0x10, 0x10, 0x0E, 0x00, 0x00 }, /* 0x39 - 9 */
	{ 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00 }, /* 0x3A - : */
	{ 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x04, 0x04, 0x02, 0x00 }, /* 0x3B - ; */
	{ 0x00, 0x00, 0x00, 0x10, 0x08, 0x04, 0x02, 0x04, 0x08, 0x10, 0x00, 0x00 }, /* 0x3C - < */
	{ 0x00, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x00 }, /* 0x3D - = */
	{ 0x00, 0x00, 0x00, 0x02, 0x04, 0x08, 0x10, 0x08, 0x04, 0x02, 0x00, 0x00 }, /* 0x3E - > */
	{ 0x00, 0x00, 0x0E, 0x11, 0x11, 0x08, 0x04, 0x00, 0x04, 0x04, 0x00, 0x00 }, /* 0x3F - ? */

	{ 0x00, 0x00, 0x0E, 0x11, 0x19, 0x15, 0x15, 0x19, 0x01, 0x1E, 0x00, 0x00 }, /* 0x40 - @ */
	{ 0x00, 0x00, 0x0E, 0x11, 0x11, 0x11, 0x1F, 0x11, 0x11, 0x11, 0x00, 0x00 }, /* 0x41 - A */
	{ 0x00, 0x00, 0x0F, 0x11, 0x11, 0x0F, 0x11, 0x11, 0x11, 0x0F, 0x00, 0x00 }, /* 0x42 - B */
	{ 0x00, 0x00, 0x0E, 0x11, 0x01, 0x01, 0x01, 0x01, 0x11, 0x0E, 0x00, 0x00 }, /* 0x43 - C */
	{ 0x00, 0x00, 0x07, 0x09, 0x11, 0x11, 0x11, 0x11, 0x09, 0x07, 0x00, 0x00 }, /* 0x44 - D */
	{ 0x00, 0x00, 0x1F, 0x01, 0x01, 0x0F, 0x01, 0x01, 0x01, 0x1F, 0x00, 0x00 }, /* 0x45 - E */
	{ 0x00, 0x00, 0x1F, 0x01, 0x01, 0x0F, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00 }, /* 0x46 - F */
	{ 0x00, 0x00, 0x0E, 0x11, 0x01, 0x01, 0x1D, 0x11, 0x11, 0x0E, 0x00, 0x00 }, /* 0x47 - G */
	{ 0x00, 0x00, 0x11, 0x11, 0x11, 0x1F, 0x11, 0x11, 0x11, 0x11, 0x00, 0x00 }, /* 0x48 - H */
	{ 0x00, 0x00, 0x0E, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x0E, 0x00, 0x00 }, /* 0x49 - I */
	{ 0x00, 0x00, 0x1C, 0x08, 0x08, 0x08, 0x08, 0x09, 0x09, 0x06, 0x00, 0x00 }, /* 0x4A - J */
	{ 0x00, 0x00, 0x11, 0x09, 0x05, 0x03, 0x03, 0x05, 0x09, 0x11, 0x00, 0x00 }, /* 0x4B - K */
	{ 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x1F, 0x00, 0x00 }, /* 0x4C - L */
	{ 0x00, 0x00, 0x11, 0x1B, 0x15, 0x15, 0x11, 0x11, 0x11, 0x11, 0x00, 0x00 }, /* 0x4D - M */
	{ 0x00, 0x00, 0x11, 0x11, 0x13, 0x15, 0x19, 0x11, 0x11, 0x11, 0x00, 0x00 }, /* 0x4E - N */
	{ 0x00, 0x00, 0x0E, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x0E, 0x00, 0x00 }, /* 0x4F - O */

	{ 0x00, 0x00, 0x0F, 0x11, 0x11, 0x11, 0x0F, 0x01, 0x01, 0x01, 0x00, 0x00 }, /* 0x50 - P */
	{ 0x00, 0x00, 0x0E, 0x11, 0x11, 0x11, 0x11, 0x11, 0x15, 0x0E, 0x10, 0x00 }, /* 0x51 - Q */
	{ 0x00, 0x00, 0x0F, 0x11, 0x11, 0x11, 0x0F, 0x05, 0x09, 0x11, 0x00, 0x00 }, /* 0x52 - R */
	{ 0x00, 0x00, 0x0E, 0x11, 0x01, 0x0E, 0x10, 0x10, 0x11, 0x0E, 0x00, 0x00 }, /* 0x53 - S */
	{ 0x00, 0x00, 0x1F, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x00, 0x00 }, /* 0x54 - T */
	{ 0x00, 0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x0E, 0x00, 0x00 }, /* 0x55 - U */
	{ 0x00, 0x00, 0x11, 0x11, 0x11, 0x0A, 0x0A, 0x0A, 0x04, 0x04, 0x00, 0x00 }, /* 0x56 - V */
	{ 0x00, 0x00, 0x11, 0x11, 0x11, 0x11, 0x15, 0x15, 0x1B, 0x11, 0x00, 0x00 }, /* 0x57 - W */
	{ 0x00, 0x00, 0x11, 0x11, 0x0A, 0x04, 0x04, 0x0A, 0x11, 0x11, 0x00, 0x00 }, /* 0x58 - X */
	{ 0x00, 0x00, 0x11, 0x11, 0x0A, 0x0A, 0x04, 0x04, 0x04, 0x04, 0x00, 0x00 }, /* 0x59 - Y */
	{ 0x00, 0x00, 0x1F, 0x10, 0x08, 0x04, 0x02, 0x01, 0x01, 0x1F, 0x00, 0x00 }, /* 0x5A - Z */
	{ 0x00, 0x00, 0x0E, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x0E, 0x00, 0x00 }, /* 0x5B - [ */
	{ 0x00, 0x00, 0x02, 0x02, 0x04, 0x04, 0x08, 0x08, 0x10, 0x10, 0x00, 0x00 }, /* 0x5C - \ */
	{ 0x00, 0x00, 0x0E, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x0E, 0x00, 0x00 }, /* 0x5D - ] */
	{ 0x00, 0x04, 0x0A, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* 0x5E - ^ */
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x00 }, /* 0x5F - _ */

	{ 0x02, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* 0x60 - ` */
	{ 0x00, 0x00, 0x00, 0x00, 0x0E, 0x10, 0x1E, 0x11, 0x11, 0x1E, 0x00, 0x00 }, /* 0x61 - a */
	{ 0x00, 0x00, 0x01, 0x01, 0x0F, 0x11, 0x11, 0x11, 0x11, 0x0F, 0x00, 0x00 }, /* 0x62 - b */
	{ 0x00, 0x00, 0x00, 0x00, 0x0E, 0x11, 0x01, 0x01, 0x11, 0x0E, 0x00, 0x00 }, /* 0x63 - c */
	{ 0x00, 0x00, 0x10, 0x10, 0x1E, 0x11, 0x11, 0x11, 0x11, 0x1E, 0x00, 0x00 }, /* 0x64 - d */
	{ 0x00, 0x00, 0x00, 0x00, 0x0E, 0x11, 0x1F, 0x01, 0x01, 0x1E, 0x00, 0x00 }, /* 0x65 - e */
	{ 0x00, 0x00, 0x18, 0x04, 0x0E, 0x04, 0x04, 0x04, 0x04, 0x04, 0x00, 0x00 }, /* 0x66 - f */
	{ 0x00, 0x00, 0x00, 0x00, 0x1E, 0x11, 0x11, 0x11, 0x11, 0x1E, 0x10, 0x0E }, /* 0x67 - g */
	{ 0x00, 0x00, 0x01, 0x01, 0x0F, 0x11, 0x11, 0x11, 0x11, 0x11, 0x00, 0x00 }, /* 0x68 - h */
	{ 0x00, 0x04, 0x04, 0x00, 0x06, 0x04, 0x04, 0x04, 0x04, 0x0E, 0x00, 0x00 }, /* 0x69 - i */
	{ 0x00, 0x10, 0x10, 0x00, 0x18, 0x10, 0x10, 0x10, 0x10, 0x10, 0x12, 0x0C }, /* 0x6A - j */
	{ 0x00, 0x00, 0x02, 0x02, 0x12, 0x0A, 0x06, 0x06, 0x0A, 0x12, 0x00, 0x00 }, /* 0x6B - k */
	{ 0x00, 0x00, 0x06, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x0E, 0x00, 0x00 }, /* 0x6C - l */
	{ 0x00, 0x00, 0x00, 0x00, 0x0F, 0x15, 0x15, 0x15, 0x15, 0x15, 0x00, 0x00 }, /* 0x6D - m */
	{ 0x00, 0x00, 0x00, 0x00, 0x0F, 0x11, 0x11, 0x11, 0x11, 0x11, 0x00, 0x00 }, /* 0x6E - n */
	{ 0x00, 0x00, 0x00, 0x00, 0x0E, 0x11, 0x11, 0x11, 0x11, 0x0E, 0x00, 0x00 }, /* 0x6F - o */

	{ 0x00, 0x00, 0x00, 0x00, 0x0F, 0x11, 0x11, 0x11, 0x11, 0x0F, 0x01, 0x01 }, /* 0x70 - p */
	{ 0x00, 0x00, 0x00, 0x00, 0x1E, 0x11, 0x11, 0x11, 0x11, 0x1E, 0x10, 0x10 }, /* 0x71 - q */
	{ 0x00, 0x00, 0x00, 0x00, 0x1D, 0x03, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00 }, /* 0x72 - r */
	{ 0x00, 0x00, 0x00, 0x00, 0x1E, 0x01, 0x0E, 0x10, 0x10, 0x0F, 0x00, 0x00 }, /* 0x73 - s */
	{ 0x00, 0x00, 0x04, 0x04, 0x0E, 0x04, 0x04, 0x04, 0x04, 0x18, 0x00, 0x00 }, /* 0x74 - t */
	{ 0x00, 0x00, 0x00, 0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x1E, 0x00, 0x00 }, /* 0x75 - u */
	{ 0x00, 0x00, 0x00, 0x00, 0x11, 0x11, 0x0A, 0x0A, 0x04, 0x04, 0x00, 0x00 }, /* 0x76 - v */
	{ 0x00, 0x00, 0x00, 0x00, 0x11, 0x11, 0x15, 0x15, 0x15, 0x0E, 0x00, 0x00 }, /* 0x77 - w */
	{ 0x00, 0x00, 0x00, 0x00, 0x11, 0x0A, 0x04, 0x04, 0x0A, 0x11, 0x00, 0x00 }, /* 0x78 - x */
	{ 0x00, 0x00, 0x00, 0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x1E, 0x10, 0x0E }, /* 0x79 - y */
	{ 0x00, 0x00, 0x00, 0x00, 0x1F, 0x08, 0x04, 0x02, 0x01, 0x1F, 0x00, 0x00 }, /* 0x7A - z */
	{ 0x00, 0x00, 0x18, 0x04, 0x04, 0x02, 0x04, 0x04, 0x04, 0x18, 0x00, 0x00 }, /* 0x7B - { */
	{ 0x00, 0x00, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x00, 0x00 }, /* 0x7C - | */
	{ 0x00, 0x00, 0x06, 0x08, 0x08, 0x10, 0x08, 0x08, 0x08, 0x06, 0x00, 0x00 }, /* 0x7D - } */
	{ 0x00, 0x12, 0x15, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* 0x7E - ~ */
	{ 0x00, 0x00, 0x3F, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x3F, 0x00, 0x00 }, /* 0x7F - Wrong character */

	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* 0x80 - Forms light horizontal */
	{ 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04 }, /* 0x81 - Forms light vertical */
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04 }, /* 0x82 - Forms light down and right */
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04 }, /* 0x83 - Forms light down and left */
	{ 0x04, 0x04, 0x04, 0x04, 0x04, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* 0x84 - Forms light up and right */
	{ 0x04, 0x04, 0x04, 0x04, 0x04, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* 0x85 - Forms light up and left */
	{ 0x04, 0x04, 0x04, 0x04, 0x04, 0x3C, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04 }, /* 0x86 - Forms light vertical and right */
	{ 0x04, 0x04, 0x04, 0x04, 0x04, 0x07, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04 }, /* 0x87 - Forms light vertical and left */
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04 }, /* 0x88 - Forms light down and horizontal */
	{ 0x04, 0x04, 0x04, 0x04, 0x04, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* 0x89 - Forms light up and horizontal */
	{ 0x04, 0x04, 0x04, 0x04, 0x04, 0x3F, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04 }, /* 0x8A - Forms light vertical and horizontal */
	{ 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* 0x8B - Upper half block */
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F }, /* 0x8C - Lower half block */
	{ 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F }, /* 0x8D - Full block */
	{ 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07 }, /* 0x8E - Left half block */
	{ 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38 }, /* 0x8F - Right half block */

	{ 0x09, 0x24, 0x09, 0x24, 0x09, 0x24, 0x09, 0x24, 0x09, 0x24, 0x09, 0x24 }, /* 0x90 - Light shade */
	{ 0x15, 0x2A, 0x15, 0x2A, 0x15, 0x2A, 0x15, 0x2A, 0x15, 0x2A, 0x15, 0x2A }, /* 0x91 - Medium shade */
	{ 0x1B, 0x2D, 0x1B, 0x2D, 0x1B, 0x2D, 0x1B, 0x2D, 0x1B, 0x2D, 0x1B, 0x2D }, /* 0x92 - Dark shade */
	{ 0x00, 0x00, 0x08, 0x14, 0x14, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04 }, /* 0x93 - Top half integral */
	{ 0x00, 0x00, 0x00, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x00, 0x00, 0x00, 0x00 }, /* 0x94 - Black small square */
	{ 0x00, 0x00, 0x00, 0x00, 0x0C, 0x1E, 0x1E, 0x0C, 0x00, 0x00, 0x00, 0x00 }, /* 0x95 - Bullet operator */
	{ 0x00, 0x30, 0x10, 0x10, 0x10, 0x11, 0x11, 0x12, 0x14, 0x18, 0x00, 0x00 }, /* 0x96 - Square root */
	{ 0x00, 0x00, 0x00, 0x00, 0x16, 0x0D, 0x00, 0x16, 0x0D, 0x00, 0x00, 0x00 }, /* 0x97 - Almost equal to */
	{ 0x00, 0x08, 0x04, 0x02, 0x01, 0x02, 0x04, 0x08, 0x00, 0x1F, 0x00, 0x00 }, /* 0x98 - Less than or equal to */
	{ 0x00, 0x02, 0x04, 0x08, 0x10, 0x08, 0x04, 0x02, 0x00, 0x1F, 0x00, 0x00 }, /* 0x99 - Greater than or equal to */
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* 0x9A - Non-breaking space */
	{ 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x05, 0x05, 0x02, 0x00, 0x00 }, /* 0x9B - Bottom half integral */
	{ 0x00, 0x04, 0x0A, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* 0x9C - Degree sign */
	{ 0x00, 0x0C, 0x12, 0x08, 0x04, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* 0x9D - Superscript digit two */
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* 0x9E - Middle dot */
	{ 0x00, 0x00, 0x00, 0x04, 0x04, 0x00, 0x1F, 0x00, 0x04, 0x04, 0x00, 0x00 }, /* 0x9F - Division sign */

	{ 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* 0xA0 - Forms double horizontal */
	{ 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A }, /* 0xA1 - Forms double vertical */
	{ 0x00, 0x00, 0x00, 0x00, 0x3C, 0x04, 0x3C, 0x04, 0x04, 0x04, 0x04, 0x04 }, /* 0xA2 - Forms down single and right double */
	{ 0x00, 0x00, 0x0A, 0x0A, 0x0E, 0x11, 0x1F, 0x01, 0x01, 0x1E, 0x00, 0x00 }, /* 0xA3 - ё */
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A }, /* 0xA4 - Forms down double and right single */
	{ 0x00, 0x00, 0x00, 0x00, 0x3E, 0x02, 0x3A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A }, /* 0xA5 - Forms double down and right */
	{ 0x00, 0x00, 0x00, 0x00, 0x07, 0x04, 0x07, 0x04, 0x04, 0x04, 0x04, 0x04 }, /* 0xA6 - Forms down single and left double */
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A }, /* 0xA7 - Forms down double and left single */
	{ 0x00, 0x00, 0x00, 0x00, 0x0F, 0x08, 0x0B, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A }, /* 0xA8 - Forms double down and left */
	{ 0x04, 0x04, 0x04, 0x04, 0x3C, 0x04, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* 0xA9 - Forms up single and right double */
	{ 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* 0xAA - Forms up double and right single */
	{ 0x0A, 0x0A, 0x0A, 0x0A, 0x3A, 0x02, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* 0xAB - Forms double up and right */
	{ 0x04, 0x04, 0x04, 0x04, 0x07, 0x04, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* 0xAC - Forms up single and left double */
	{ 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* 0xAD - Forms up double and left single */
	{ 0x0A, 0x0A, 0x0A, 0x0A, 0x0B, 0x08, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* 0xAE - Forms double up and left */
	{ 0x04, 0x04, 0x04, 0x04, 0x3C, 0x04, 0x3C, 0x04, 0x04, 0x04, 0x04, 0x04 }, /* 0xAF - Forms vertical single and right double */

	{ 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x3A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A }, /* 0xB0 - Forms vertical double and right single */
	{ 0x0A, 0x0A, 0x0A, 0x0A, 0x3A, 0x02, 0x3A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A }, /* 0xB1 - Forms double vertical and right */
	{ 0x04, 0x04, 0x04, 0x04, 0x07, 0x04, 0x07, 0x04, 0x04, 0x04, 0x04, 0x04 }, /* 0xB2 - Forms vertical single and left double */
	{ 0x0A, 0x0A, 0x1F, 0x01, 0x01, 0x0F, 0x01, 0x01, 0x01, 0x1F, 0x00, 0x00 }, /* 0xB3 - Ё */
	{ 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0B, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A }, /* 0xB4 - Forms vertical double and left single */
	{ 0x0A, 0x0A, 0x0A, 0x0A, 0x0B, 0x08, 0x0B, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A }, /* 0xB5 - Forms double vertical and left */
	{ 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x3F, 0x04, 0x04, 0x04, 0x04, 0x04 }, /* 0xB6 - Forms down single and horizontal double */
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A }, /* 0xB7 - Forms down double and horizontal single */
	{ 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x3B, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A }, /* 0xB8 - Forms double down and horizontal */
	{ 0x04, 0x04, 0x04, 0x04, 0x3F, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* 0xB9 - Forms up single and horizontal double */
	{ 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* 0xBA - Forms up double and horizontal single */
	{ 0x0A, 0x0A, 0x0A, 0x0A, 0x3B, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* 0xBB - Forms double up and horizontal */
	{ 0x04, 0x04, 0x04, 0x04, 0x3F, 0x04, 0x3F, 0x04, 0x04, 0x04, 0x04, 0x04 }, /* 0xBC - Forms vertical single and horizontal double */
	{ 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x3F, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A }, /* 0xBD - Forms vertical double and horizontal single */
	{ 0x0A, 0x0A, 0x0A, 0x0A, 0x3B, 0x00, 0x3B, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A }, /* 0xBE - Forms double vertical and horizontal */
	{ 0x00, 0x00, 0x1E, 0x21, 0x2D, 0x25, 0x25, 0x2D, 0x21, 0x1E, 0x00, 0x00 }, /* 0xBF - Copyright sign */

	{ 0x00, 0x00, 0x00, 0x00, 0x09, 0x15, 0x15, 0x17, 0x15, 0x09, 0x00, 0x00 }, /* 0xC0 - ю */
	{ 0x00, 0x00, 0x00, 0x00, 0x0E, 0x10, 0x1E, 0x11, 0x11, 0x1E, 0x00, 0x00 }, /* 0xC1 - а */
	{ 0x00, 0x00, 0x0E, 0x01, 0x0F, 0x11, 0x11, 0x11, 0x11, 0x0F, 0x00, 0x00 }, /* 0xC2 - б */
	{ 0x00, 0x00, 0x00, 0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x3E, 0x20, 0x20 }, /* 0xC3 - ц */
	{ 0x00, 0x00, 0x00, 0x00, 0x1E, 0x11, 0x11, 0x11, 0x11, 0x1E, 0x10, 0x0E }, /* 0xC4 - д */
	{ 0x00, 0x00, 0x00, 0x00, 0x0E, 0x11, 0x1F, 0x01, 0x01, 0x1E, 0x00, 0x00 }, /* 0xC5 - е */
	{ 0x00, 0x00, 0x00, 0x04, 0x0E, 0x15, 0x15, 0x15, 0x15, 0x0E, 0x04, 0x00 }, /* 0xC6 - ф */
	{ 0x00, 0x00, 0x00, 0x00, 0x1F, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00 }, /* 0xC7 - г */
	{ 0x00, 0x00, 0x00, 0x00, 0x11, 0x0A, 0x04, 0x04, 0x0A, 0x11, 0x00, 0x00 }, /* 0xC8 - х */
	{ 0x00, 0x00, 0x00, 0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x1E, 0x00, 0x00 }, /* 0xC9 - и */
	{ 0x00, 0x00, 0x0A, 0x04, 0x11, 0x11, 0x11, 0x11, 0x11, 0x1E, 0x00, 0x00 }, /* 0xCA - й */
	{ 0x00, 0x00, 0x00, 0x00, 0x12, 0x0A, 0x06, 0x06, 0x0A, 0x12, 0x00, 0x00 }, /* 0xCB - к */
	{ 0x00, 0x00, 0x00, 0x00, 0x1C, 0x12, 0x12, 0x12, 0x12, 0x11, 0x00, 0x00 }, /* 0xCC - л */
	{ 0x00, 0x00, 0x00, 0x00, 0x11, 0x1B, 0x15, 0x11, 0x11, 0x11, 0x00, 0x00 }, /* 0xCD - м */
	{ 0x00, 0x00, 0x00, 0x00, 0x11, 0x11, 0x1F, 0x11, 0x11, 0x11, 0x00, 0x00 }, /* 0xCE - н */
	{ 0x00, 0x00, 0x00, 0x00, 0x0E, 0x11, 0x11, 0x11, 0x11, 0x0E, 0x00, 0x00 }, /* 0xCF - о */

	{ 0x00, 0x00, 0x00, 0x00, 0x1F, 0x11, 0x11, 0x11, 0x11, 0x11, 0x00, 0x00 }, /* 0xD0 - п */
	{ 0x00, 0x00, 0x00, 0x00, 0x1E, 0x11, 0x11, 0x1E, 0x14, 0x12, 0x00, 0x00 }, /* 0xD1 - я */
	{ 0x00, 0x00, 0x00, 0x00, 0x0F, 0x11, 0x11, 0x11, 0x11, 0x0F, 0x01, 0x01 }, /* 0xD2 - р */
	{ 0x00, 0x00, 0x00, 0x00, 0x0E, 0x11, 0x01, 0x01, 0x11, 0x0E, 0x00, 0x00 }, /* 0xD3 - с */
	{ 0x00, 0x00, 0x00, 0x00, 0x1F, 0x04, 0x04, 0x04, 0x04, 0x04, 0x00, 0x00 }, /* 0xD4 - т */
	{ 0x00, 0x00, 0x00, 0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x1E, 0x10, 0x0E }, /* 0xD5 - у */
	{ 0x00, 0x00, 0x00, 0x00, 0x15, 0x15, 0x0E, 0x15, 0x15, 0x15, 0x00, 0x00 }, /* 0xD6 - ж */
	{ 0x00, 0x00, 0x07, 0x09, 0x09, 0x0F, 0x11, 0x11, 0x11, 0x0F, 0x00, 0x00 }, /* 0xD7 - в */
	{ 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x0E, 0x12, 0x12, 0x0E, 0x00, 0x00 }, /* 0xD8 - ь */
	{ 0x00, 0x00, 0x00, 0x00, 0x11, 0x11, 0x13, 0x15, 0x15, 0x13, 0x00, 0x00 }, /* 0xD9 - ы */
	{ 0x00, 0x00, 0x00, 0x00, 0x0E, 0x11, 0x0C, 0x10, 0x11, 0x0E, 0x00, 0x00 }, /* 0xDA - з */
	{ 0x00, 0x00, 0x00, 0x00, 0x15, 0x15, 0x15, 0x15, 0x15, 0x1E, 0x00, 0x00 }, /* 0xDB - ш */
	{ 0x00, 0x00, 0x00, 0x00, 0x0E, 0x11, 0x1C, 0x10, 0x11, 0x0E, 0x00, 0x00 }, /* 0xDC - э */
	{ 0x00, 0x00, 0x00, 0x00, 0x15, 0x15, 0x15, 0x15, 0x15, 0x3E, 0x20, 0x20 }, /* 0xDD - щ */
	{ 0x00, 0x00, 0x00, 0x00, 0x11, 0x11, 0x11, 0x1E, 0x10, 0x10, 0x00, 0x00 }, /* 0xDE - ч */
	{ 0x00, 0x00, 0x00, 0x00, 0x03, 0x02, 0x0E, 0x12, 0x12, 0x0E, 0x00, 0x00 }, /* 0xDF - ъ */

	{ 0x00, 0x00, 0x09, 0x15, 0x15, 0x15, 0x17, 0x15, 0x15, 0x09, 0x00, 0x00 }, /* 0xE0 - Ю */
	{ 0x00, 0x00, 0x0E, 0x11, 0x11, 0x11, 0x1F, 0x11, 0x11, 0x11, 0x00, 0x00 }, /* 0xE1 - А */
	{ 0x00, 0x00, 0x0F, 0x01, 0x01, 0x0F, 0x11, 0x11, 0x11, 0x0F, 0x00, 0x00 }, /* 0xE2 - Б */
	{ 0x00, 0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x3E, 0x20, 0x20 }, /* 0xE3 - Ц */
	{ 0x00, 0x00, 0x1C, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x3F, 0x21, 0x00 }, /* 0xE4 - Д */
	{ 0x00, 0x00, 0x1F, 0x01, 0x01, 0x0F, 0x01, 0x01, 0x01, 0x1F, 0x00, 0x00 }, /* 0xE5 - Е */
	{ 0x00, 0x04, 0x0E, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x0E, 0x04, 0x00 }, /* 0xE6 - Ф */
	{ 0x00, 0x00, 0x1F, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00 }, /* 0xE7 - Г */
	{ 0x00, 0x00, 0x11, 0x11, 0x0A, 0x04, 0x04, 0x0A, 0x11, 0x11, 0x00, 0x00 }, /* 0xE8 - Х */
	{ 0x00, 0x00, 0x11, 0x11, 0x19, 0x15, 0x13, 0x11, 0x11, 0x11, 0x00, 0x00 }, /* 0xE9 - И */
	{ 0x0A, 0x04, 0x11, 0x11, 0x19, 0x15, 0x13, 0x11, 0x11, 0x11, 0x00, 0x00 }, /* 0xEA - Й */
	{ 0x00, 0x00, 0x11, 0x09, 0x05, 0x03, 0x03, 0x05, 0x09, 0x11, 0x00, 0x00 }, /* 0xEB - К */
	{ 0x00, 0x00, 0x1C, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x11, 0x00, 0x00 }, /* 0xEC - Л */
	{ 0x00, 0x00, 0x11, 0x1B, 0x15, 0x15, 0x11, 0x11, 0x11, 0x11, 0x00, 0x00 }, /* 0xED - М */
	{ 0x00, 0x00, 0x11, 0x11, 0x11, 0x1F, 0x11, 0x11, 0x11, 0x11, 0x00, 0x00 }, /* 0xEE - Н */
	{ 0x00, 0x00, 0x0E, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x0E, 0x00, 0x00 }, /* 0xEF - О */

	{ 0x00, 0x00, 0x1F, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x00, 0x00 }, /* 0xF0 - П */
	{ 0x00, 0x00, 0x1E, 0x11, 0x11, 0x11, 0x1E, 0x14, 0x12, 0x11, 0x00, 0x00 }, /* 0xF1 - Я */
	{ 0x00, 0x00, 0x0F, 0x11, 0x11, 0x11, 0x0F, 0x01, 0x01, 0x01, 0x00, 0x00 }, /* 0xF2 - Р */
	{ 0x00, 0x00, 0x0E, 0x11, 0x01, 0x01, 0x01, 0x01, 0x11, 0x0E, 0x00, 0x00 }, /* 0xF3 - С */
	{ 0x00, 0x00, 0x1F, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x00, 0x00 }, /* 0xF4 - Т */
	{ 0x00, 0x00, 0x11, 0x11, 0x11, 0x11, 0x1E, 0x10, 0x10, 0x0E, 0x00, 0x00 }, /* 0xF5 - У */
	{ 0x00, 0x00, 0x15, 0x15, 0x15, 0x0E, 0x0E, 0x15, 0x15, 0x15, 0x00, 0x00 }, /* 0xF6 - Ж */
	{ 0x00, 0x00, 0x0F, 0x11, 0x11, 0x0F, 0x11, 0x11, 0x11, 0x0F, 0x00, 0x00 }, /* 0xF7 - В */
	{ 0x00, 0x00, 0x02, 0x02, 0x0E, 0x12, 0x12, 0x12, 0x12, 0x0E, 0x00, 0x00 }, /* 0xF8 - Ь */
	{ 0x00, 0x00, 0x11, 0x11, 0x13, 0x15, 0x15, 0x15, 0x15, 0x13, 0x00, 0x00 }, /* 0xF9 - Ы */
	{ 0x00, 0x00, 0x0E, 0x11, 0x10, 0x0C, 0x10, 0x10, 0x11, 0x0E, 0x00, 0x00 }, /* 0xFA - З */
	{ 0x00, 0x00, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x1E, 0x00, 0x00 }, /* 0xFB - Ш */
	{ 0x00, 0x00, 0x0E, 0x11, 0x10, 0x1C, 0x10, 0x10, 0x11, 0x0E, 0x00, 0x00 }, /* 0xFC - Э */
	{ 0x00, 0x00, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x3E, 0x20, 0x20 }, /* 0xFD - Щ */
	{ 0x00, 0x00, 0x11, 0x11, 0x11, 0x11, 0x1E, 0x10, 0x10, 0x10, 0x00, 0x00 }, /* 0xFE - Ч */
	{ 0x00, 0x00, 0x03, 0x02, 0x0E, 0x12, 0x12, 0x12, 0x12, 0x0E, 0x00, 0x00 }, /* 0xFF - Ъ */
};

/**
 * Wrong character code raster.
 */
static const uint8_t FMGL_FontTerminusRegular12_WrongCharacterCode[] = { 0x00, 0x00, 0x3F, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x3F, 0x00, 0x00 };


#endif /* FMGL_INCLUDE_FONTS_TERMINUSREGULAR12_H_ */
